// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentBase
#include <haxe/ui/backend/ComponentBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_ComponentImpl
#include <haxe/ui/backend/ComponentImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventBase
#include <haxe/ui/backend/EventBase.h>
#endif
#ifndef INCLUDED_haxe_ui_backend_EventImpl
#include <haxe/ui/backend/EventImpl.h>
#endif
#ifndef INCLUDED_haxe_ui_components_HorizontalScroll
#include <haxe/ui/components/HorizontalScroll.h>
#endif
#ifndef INCLUDED_haxe_ui_components_Scroll
#include <haxe/ui/components/Scroll.h>
#endif
#ifndef INCLUDED_haxe_ui_components_VerticalScroll
#include <haxe/ui/components/VerticalScroll.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_Box
#include <haxe/ui/containers/Box.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_ScrollView
#include <haxe/ui/containers/ScrollView.h>
#endif
#ifndef INCLUDED_haxe_ui_containers_ScrollViewBuilder
#include <haxe/ui/containers/ScrollViewBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_core_Component
#include <haxe/ui/core/Component.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentBounds
#include <haxe/ui/core/ComponentBounds.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentCommon
#include <haxe/ui/core/ComponentCommon.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentContainer
#include <haxe/ui/core/ComponentContainer.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentEvents
#include <haxe/ui/core/ComponentEvents.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentLayout
#include <haxe/ui/core/ComponentLayout.h>
#endif
#ifndef INCLUDED_haxe_ui_core_ComponentValidation
#include <haxe/ui/core/ComponentValidation.h>
#endif
#ifndef INCLUDED_haxe_ui_core_CompositeBuilder
#include <haxe/ui/core/CompositeBuilder.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IClonable
#include <haxe/ui/core/IClonable.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IDirectionalComponent
#include <haxe/ui/core/IDirectionalComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IScrollView
#include <haxe/ui/core/IScrollView.h>
#endif
#ifndef INCLUDED_haxe_ui_core_IValueComponent
#include <haxe/ui/core/IValueComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_core_InteractiveComponent
#include <haxe/ui/core/InteractiveComponent.h>
#endif
#ifndef INCLUDED_haxe_ui_events_UIEvent
#include <haxe/ui/events/UIEvent.h>
#endif
#ifndef INCLUDED_haxe_ui_focus_IFocusable
#include <haxe/ui/focus/IFocusable.h>
#endif
#ifndef INCLUDED_haxe_ui_geom_Rectangle
#include <haxe/ui/geom/Rectangle.h>
#endif
#ifndef INCLUDED_haxe_ui_geom_Size
#include <haxe/ui/geom/Size.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_ILayout
#include <haxe/ui/layouts/ILayout.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_Layout
#include <haxe/ui/layouts/Layout.h>
#endif
#ifndef INCLUDED_haxe_ui_layouts_LayoutFactory
#include <haxe/ui/layouts/LayoutFactory.h>
#endif
#ifndef INCLUDED_haxe_ui_styles_Style
#include <haxe/ui/styles/Style.h>
#endif
#ifndef INCLUDED_haxe_ui_validation_IValidating
#include <haxe/ui/validation/IValidating.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_23283b2891872f10_1061_new,"haxe.ui.containers.ScrollViewBuilder","new",0xf0805b31,"haxe.ui.containers.ScrollViewBuilder.new","haxe/ui/containers/ScrollView.hx",1061,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1067_create,"haxe.ui.containers.ScrollViewBuilder","create",0xb0fab4cb,"haxe.ui.containers.ScrollViewBuilder.create","haxe/ui/containers/ScrollView.hx",1067,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1075_destroy,"haxe.ui.containers.ScrollViewBuilder","destroy",0x3d7ef44b,"haxe.ui.containers.ScrollViewBuilder.destroy","haxe/ui/containers/ScrollView.hx",1075,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1079_get_numComponents,"haxe.ui.containers.ScrollViewBuilder","get_numComponents",0xe5ddece4,"haxe.ui.containers.ScrollViewBuilder.get_numComponents","haxe/ui/containers/ScrollView.hx",1079,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1082_addComponent,"haxe.ui.containers.ScrollViewBuilder","addComponent",0xda66256b,"haxe.ui.containers.ScrollViewBuilder.addComponent","haxe/ui/containers/ScrollView.hx",1082,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1089_addComponentAt,"haxe.ui.containers.ScrollViewBuilder","addComponentAt",0xdc4acf3e,"haxe.ui.containers.ScrollViewBuilder.addComponentAt","haxe/ui/containers/ScrollView.hx",1089,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1096_removeComponent,"haxe.ui.containers.ScrollViewBuilder","removeComponent",0x886c8c2a,"haxe.ui.containers.ScrollViewBuilder.removeComponent","haxe/ui/containers/ScrollView.hx",1096,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1103_removeAllComponents,"haxe.ui.containers.ScrollViewBuilder","removeAllComponents",0x9d061b84,"haxe.ui.containers.ScrollViewBuilder.removeAllComponents","haxe/ui/containers/ScrollView.hx",1103,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1109_removeComponentAt,"haxe.ui.containers.ScrollViewBuilder","removeComponentAt",0xe5c7a3bd,"haxe.ui.containers.ScrollViewBuilder.removeComponentAt","haxe/ui/containers/ScrollView.hx",1109,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1113_getComponentIndex,"haxe.ui.containers.ScrollViewBuilder","getComponentIndex",0x2a4672dc,"haxe.ui.containers.ScrollViewBuilder.getComponentIndex","haxe/ui/containers/ScrollView.hx",1113,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1116_setComponentIndex,"haxe.ui.containers.ScrollViewBuilder","setComponentIndex",0x4db44ae8,"haxe.ui.containers.ScrollViewBuilder.setComponentIndex","haxe/ui/containers/ScrollView.hx",1116,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1124_getComponentAt,"haxe.ui.containers.ScrollViewBuilder","getComponentAt",0xce121ae9,"haxe.ui.containers.ScrollViewBuilder.getComponentAt","haxe/ui/containers/ScrollView.hx",1124,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1128_createContentContainer,"haxe.ui.containers.ScrollViewBuilder","createContentContainer",0xdb7eefb3,"haxe.ui.containers.ScrollViewBuilder.createContentContainer","haxe/ui/containers/ScrollView.hx",1128,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1139_horizontalConstraintModifier,"haxe.ui.containers.ScrollViewBuilder","horizontalConstraintModifier",0xdb3147e7,"haxe.ui.containers.ScrollViewBuilder.horizontalConstraintModifier","haxe/ui/containers/ScrollView.hx",1139,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1143_verticalConstraintModifier,"haxe.ui.containers.ScrollViewBuilder","verticalConstraintModifier",0xd28ea239,"haxe.ui.containers.ScrollViewBuilder.verticalConstraintModifier","haxe/ui/containers/ScrollView.hx",1143,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1147_checkScrolls,"haxe.ui.containers.ScrollViewBuilder","checkScrolls",0xea1cfeed,"haxe.ui.containers.ScrollViewBuilder.checkScrolls","haxe/ui/containers/ScrollView.hx",1147,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1212_createHScroll,"haxe.ui.containers.ScrollViewBuilder","createHScroll",0xc386fd0a,"haxe.ui.containers.ScrollViewBuilder.createHScroll","haxe/ui/containers/ScrollView.hx",1212,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1253_createVScroll,"haxe.ui.containers.ScrollViewBuilder","createVScroll",0x09b37b98,"haxe.ui.containers.ScrollViewBuilder.createVScroll","haxe/ui/containers/ScrollView.hx",1253,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1294_destroyHScroll,"haxe.ui.containers.ScrollViewBuilder","destroyHScroll",0x92d1ad8a,"haxe.ui.containers.ScrollViewBuilder.destroyHScroll","haxe/ui/containers/ScrollView.hx",1294,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1302_destroyVScroll,"haxe.ui.containers.ScrollViewBuilder","destroyVScroll",0xd8fe2c18,"haxe.ui.containers.ScrollViewBuilder.destroyVScroll","haxe/ui/containers/ScrollView.hx",1302,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1348_updateScrollRect,"haxe.ui.containers.ScrollViewBuilder","updateScrollRect",0x1618f1c9,"haxe.ui.containers.ScrollViewBuilder.updateScrollRect","haxe/ui/containers/ScrollView.hx",1348,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1309_updateScrollRect,"haxe.ui.containers.ScrollViewBuilder","updateScrollRect",0x1618f1c9,"haxe.ui.containers.ScrollViewBuilder.updateScrollRect","haxe/ui/containers/ScrollView.hx",1309,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1362_get_virtualHorizontal,"haxe.ui.containers.ScrollViewBuilder","get_virtualHorizontal",0xe8f950b7,"haxe.ui.containers.ScrollViewBuilder.get_virtualHorizontal","haxe/ui/containers/ScrollView.hx",1362,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1367_get_virtualVertical,"haxe.ui.containers.ScrollViewBuilder","get_virtualVertical",0x4e806589,"haxe.ui.containers.ScrollViewBuilder.get_virtualVertical","haxe/ui/containers/ScrollView.hx",1367,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1370_onVirtualChanged,"haxe.ui.containers.ScrollViewBuilder","onVirtualChanged",0x5de33637,"haxe.ui.containers.ScrollViewBuilder.onVirtualChanged","haxe/ui/containers/ScrollView.hx",1370,0x01b76681)
HX_LOCAL_STACK_FRAME(_hx_pos_23283b2891872f10_1374_applyStyle,"haxe.ui.containers.ScrollViewBuilder","applyStyle",0xc0770232,"haxe.ui.containers.ScrollViewBuilder.applyStyle","haxe/ui/containers/ScrollView.hx",1374,0x01b76681)
namespace haxe{
namespace ui{
namespace containers{

void ScrollViewBuilder_obj::__construct( ::haxe::ui::containers::ScrollView scrollview){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1061_new)
HXLINE(1062)		super::__construct(scrollview);
HXLINE(1063)		this->_scrollview = scrollview;
HXLINE(1064)		this->_scrollview->cascadeActive = true;
            	}

Dynamic ScrollViewBuilder_obj::__CreateEmpty() { return new ScrollViewBuilder_obj; }

void *ScrollViewBuilder_obj::_hx_vtable = 0;

Dynamic ScrollViewBuilder_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ScrollViewBuilder_obj > _hx_result = new ScrollViewBuilder_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ScrollViewBuilder_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0472fd8d) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0472fd8d;
	} else {
		return inClassId==(int)0x17e93bfd;
	}
}

void ScrollViewBuilder_obj::create(){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1067_create)
HXLINE(1068)		::String contentLayoutName = this->_scrollview->get_contentLayoutName();
HXLINE(1069)		if (::hx::IsNull( contentLayoutName )) {
HXLINE(1070)			contentLayoutName = HX_("vertical",76,bc,15,6a);
            		}
HXLINE(1072)		this->createContentContainer(contentLayoutName);
            	}


void ScrollViewBuilder_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1075_destroy)
            	}


 ::Dynamic ScrollViewBuilder_obj::get_numComponents(){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1079_get_numComponents)
HXDLIN(1079)		return this->_contents->get_numComponents();
            	}


 ::haxe::ui::core::Component ScrollViewBuilder_obj::addComponent( ::haxe::ui::core::Component child){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1082_addComponent)
HXLINE(1083)		bool _hx_tmp;
HXDLIN(1083)		bool _hx_tmp1;
HXDLIN(1083)		if ((::Std_obj::isOfType(child,::hx::ClassOf< ::haxe::ui::components::HorizontalScroll >()) == false)) {
HXLINE(1083)			_hx_tmp1 = (::Std_obj::isOfType(child,::hx::ClassOf< ::haxe::ui::components::VerticalScroll >()) == false);
            		}
            		else {
HXLINE(1083)			_hx_tmp1 = false;
            		}
HXDLIN(1083)		if (_hx_tmp1) {
HXLINE(1083)			_hx_tmp = ((child->classes->indexOf(HX_("scrollview-contents",15,b7,70,a7),null()) != -1) == false);
            		}
            		else {
HXLINE(1083)			_hx_tmp = false;
            		}
HXDLIN(1083)		if (_hx_tmp) {
HXLINE(1084)			return this->_contents->addComponent(child);
            		}
HXLINE(1086)		return null();
            	}


 ::haxe::ui::core::Component ScrollViewBuilder_obj::addComponentAt( ::haxe::ui::core::Component child,int index){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1089_addComponentAt)
HXLINE(1090)		bool _hx_tmp;
HXDLIN(1090)		bool _hx_tmp1;
HXDLIN(1090)		if ((::Std_obj::isOfType(child,::hx::ClassOf< ::haxe::ui::components::HorizontalScroll >()) == false)) {
HXLINE(1090)			_hx_tmp1 = (::Std_obj::isOfType(child,::hx::ClassOf< ::haxe::ui::components::VerticalScroll >()) == false);
            		}
            		else {
HXLINE(1090)			_hx_tmp1 = false;
            		}
HXDLIN(1090)		if (_hx_tmp1) {
HXLINE(1090)			_hx_tmp = ((child->classes->indexOf(HX_("scrollview-contents",15,b7,70,a7),null()) != -1) == false);
            		}
            		else {
HXLINE(1090)			_hx_tmp = false;
            		}
HXDLIN(1090)		if (_hx_tmp) {
HXLINE(1091)			return this->_contents->addComponentAt(child,index);
            		}
HXLINE(1093)		return null();
            	}


 ::haxe::ui::core::Component ScrollViewBuilder_obj::removeComponent( ::haxe::ui::core::Component child,::hx::Null< bool >  __o_dispose,::hx::Null< bool >  __o_invalidate){
            		bool dispose = __o_dispose.Default(true);
            		bool invalidate = __o_invalidate.Default(true);
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1096_removeComponent)
HXLINE(1097)		bool _hx_tmp;
HXDLIN(1097)		bool _hx_tmp1;
HXDLIN(1097)		if ((::Std_obj::isOfType(child,::hx::ClassOf< ::haxe::ui::components::HorizontalScroll >()) == false)) {
HXLINE(1097)			_hx_tmp1 = (::Std_obj::isOfType(child,::hx::ClassOf< ::haxe::ui::components::VerticalScroll >()) == false);
            		}
            		else {
HXLINE(1097)			_hx_tmp1 = false;
            		}
HXDLIN(1097)		if (_hx_tmp1) {
HXLINE(1097)			_hx_tmp = ((child->classes->indexOf(HX_("scrollview-contents",15,b7,70,a7),null()) != -1) == false);
            		}
            		else {
HXLINE(1097)			_hx_tmp = false;
            		}
HXDLIN(1097)		if (_hx_tmp) {
HXLINE(1098)			return this->_contents->removeComponent(child,dispose,invalidate);
            		}
HXLINE(1100)		return null();
            	}


bool ScrollViewBuilder_obj::removeAllComponents(::hx::Null< bool >  __o_dispose){
            		bool dispose = __o_dispose.Default(true);
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1103_removeAllComponents)
HXLINE(1104)		this->_contents->removeAllComponents(dispose);
HXLINE(1105)		return true;
            	}


 ::haxe::ui::core::Component ScrollViewBuilder_obj::removeComponentAt(int index,::hx::Null< bool >  __o_dispose,::hx::Null< bool >  __o_invalidate){
            		bool dispose = __o_dispose.Default(true);
            		bool invalidate = __o_invalidate.Default(true);
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1109_removeComponentAt)
HXDLIN(1109)		return this->_contents->removeComponentAt(index,dispose,invalidate);
            	}


int ScrollViewBuilder_obj::getComponentIndex( ::haxe::ui::core::Component child){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1113_getComponentIndex)
HXDLIN(1113)		return this->_contents->getComponentIndex(child);
            	}


 ::haxe::ui::core::Component ScrollViewBuilder_obj::setComponentIndex( ::haxe::ui::core::Component child,int index){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1116_setComponentIndex)
HXLINE(1117)		bool _hx_tmp;
HXDLIN(1117)		bool _hx_tmp1;
HXDLIN(1117)		if ((::Std_obj::isOfType(child,::hx::ClassOf< ::haxe::ui::components::HorizontalScroll >()) == false)) {
HXLINE(1117)			_hx_tmp1 = (::Std_obj::isOfType(child,::hx::ClassOf< ::haxe::ui::components::VerticalScroll >()) == false);
            		}
            		else {
HXLINE(1117)			_hx_tmp1 = false;
            		}
HXDLIN(1117)		if (_hx_tmp1) {
HXLINE(1117)			_hx_tmp = ((child->classes->indexOf(HX_("scrollview-contents",15,b7,70,a7),null()) != -1) == false);
            		}
            		else {
HXLINE(1117)			_hx_tmp = false;
            		}
HXDLIN(1117)		if (_hx_tmp) {
HXLINE(1118)			return this->_contents->setComponentIndex(child,index);
            		}
HXLINE(1120)		return null();
            	}


 ::haxe::ui::core::Component ScrollViewBuilder_obj::getComponentAt(int index){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1124_getComponentAt)
HXDLIN(1124)		return this->_contents->getComponentAt(index);
            	}


void ScrollViewBuilder_obj::createContentContainer(::String layoutName){
            	HX_GC_STACKFRAME(&_hx_pos_23283b2891872f10_1128_createContentContainer)
HXDLIN(1128)		if (::hx::IsNull( this->_contents )) {
HXLINE(1129)			this->_contents =  ::haxe::ui::containers::Box_obj::__alloc( HX_CTX );
HXLINE(1130)			this->_contents->addClass(HX_("scrollview-contents",15,b7,70,a7),null(),null());
HXLINE(1131)			this->_contents->set_id(HX_("scrollview-contents",15,b7,70,a7));
HXLINE(1132)			 ::haxe::ui::containers::Box _hx_tmp = this->_contents;
HXDLIN(1132)			_hx_tmp->set_layout(::haxe::ui::layouts::LayoutFactory_obj::createFromName(layoutName));
HXLINE(1133)			this->_component->addComponent(this->_contents);
HXLINE(1134)			this->_contentsLayoutName = layoutName;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ScrollViewBuilder_obj,createContentContainer,(void))

Float ScrollViewBuilder_obj::horizontalConstraintModifier(){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1139_horizontalConstraintModifier)
HXDLIN(1139)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollViewBuilder_obj,horizontalConstraintModifier,return )

Float ScrollViewBuilder_obj::verticalConstraintModifier(){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1143_verticalConstraintModifier)
HXDLIN(1143)		return ( (Float)(0) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollViewBuilder_obj,verticalConstraintModifier,return )

void ScrollViewBuilder_obj::checkScrolls(){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1147_checkScrolls)
HXLINE(1148)		if ((this->_component->get_isNativeScroller() == true)) {
HXLINE(1149)			return;
            		}
HXLINE(1152)		 ::haxe::ui::geom::Size usableSize = this->_component->get_layout()->get_usableSize();
HXLINE(1154)		bool _hx_tmp;
HXDLIN(1154)		if ((this->get_virtualHorizontal() == false)) {
HXLINE(1154)			_hx_tmp = (usableSize->width > 0);
            		}
            		else {
HXLINE(1154)			_hx_tmp = false;
            		}
HXDLIN(1154)		if (_hx_tmp) {
HXLINE(1155)			 ::haxe::ui::containers::Box horizontalConstraint = this->_contents;
HXLINE(1156)			 ::haxe::ui::components::HorizontalScroll hscroll = this->_component->findComponent(null(),::hx::ClassOf< ::haxe::ui::components::HorizontalScroll >(),false,null()).StaticCast<  ::haxe::ui::components::HorizontalScroll >();
HXLINE(1157)			Float vcw = horizontalConstraint->get_width();
HXDLIN(1157)			Float vcw1 = (vcw + this->horizontalConstraintModifier());
HXLINE(1158)			if ((vcw1 > usableSize->width)) {
HXLINE(1159)				if (::hx::IsNull( hscroll )) {
HXLINE(1160)					hscroll = this->createHScroll();
            				}
HXLINE(1163)				hscroll->set_max((vcw1 - usableSize->width));
HXLINE(1164)				if (::hx::IsNull( this->_scrollview->get_hscrollThumbSize() )) {
HXLINE(1165)					Float _hx_tmp1 = (usableSize->width / vcw1);
HXDLIN(1165)					hscroll->set_pageSize((_hx_tmp1 * hscroll->get_max()));
            				}
HXLINE(1168)				hscroll->syncComponentValidation(null());
            			}
            			else {
HXLINE(1169)				if ((this->_scrollview->get_horizontalScrollPolicy() == HX_("always",cf,0e,d7,46))) {
HXLINE(1170)					if (::hx::IsNull( hscroll )) {
HXLINE(1171)						hscroll = this->createHScroll();
            					}
HXLINE(1173)					hscroll->set_max(( (Float)(0) ));
HXLINE(1174)					hscroll->set_pageSize(( (Float)(0) ));
            				}
            				else {
HXLINE(1176)					bool _hx_tmp2;
HXDLIN(1176)					if ((this->_scrollview->get_horizontalScrollPolicy() != HX_("always",cf,0e,d7,46))) {
HXLINE(1176)						_hx_tmp2 = ::hx::IsNotNull( hscroll );
            					}
            					else {
HXLINE(1176)						_hx_tmp2 = false;
            					}
HXDLIN(1176)					if (_hx_tmp2) {
HXLINE(1177)						this->destroyHScroll();
            					}
            				}
            			}
            		}
HXLINE(1182)		bool _hx_tmp3;
HXDLIN(1182)		if ((this->get_virtualVertical() == false)) {
HXLINE(1182)			_hx_tmp3 = (usableSize->height > 0);
            		}
            		else {
HXLINE(1182)			_hx_tmp3 = false;
            		}
HXDLIN(1182)		if (_hx_tmp3) {
HXLINE(1183)			 ::haxe::ui::containers::Box verticalConstraint = this->_contents;
HXLINE(1184)			 ::haxe::ui::components::VerticalScroll vscroll = this->_component->findComponent(null(),::hx::ClassOf< ::haxe::ui::components::VerticalScroll >(),false,null()).StaticCast<  ::haxe::ui::components::VerticalScroll >();
HXLINE(1185)			Float vch = verticalConstraint->get_height();
HXDLIN(1185)			Float vch1 = (vch + this->verticalConstraintModifier());
HXLINE(1186)			if ((vch1 > usableSize->height)) {
HXLINE(1187)				if (::hx::IsNull( vscroll )) {
HXLINE(1188)					vscroll = this->createVScroll();
            				}
HXLINE(1191)				vscroll->set_max((vch1 - usableSize->height));
HXLINE(1192)				if (::hx::IsNull( this->_scrollview->get_vscrollThumbSize() )) {
HXLINE(1193)					Float _hx_tmp4 = (usableSize->height / vch1);
HXDLIN(1193)					vscroll->set_pageSize((_hx_tmp4 * vscroll->get_max()));
            				}
HXLINE(1196)				vscroll->syncComponentValidation(null());
            			}
            			else {
HXLINE(1197)				if ((this->_scrollview->get_verticalScrollPolicy() == HX_("always",cf,0e,d7,46))) {
HXLINE(1198)					if (::hx::IsNull( vscroll )) {
HXLINE(1199)						vscroll = this->createVScroll();
            					}
HXLINE(1201)					vscroll->set_max(( (Float)(0) ));
HXLINE(1202)					vscroll->set_pageSize(( (Float)(0) ));
            				}
            				else {
HXLINE(1204)					bool _hx_tmp5;
HXDLIN(1204)					if ((this->_scrollview->get_verticalScrollPolicy() != HX_("always",cf,0e,d7,46))) {
HXLINE(1204)						_hx_tmp5 = ::hx::IsNotNull( vscroll );
            					}
            					else {
HXLINE(1204)						_hx_tmp5 = false;
            					}
HXDLIN(1204)					if (_hx_tmp5) {
HXLINE(1205)						this->destroyVScroll();
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollViewBuilder_obj,checkScrolls,(void))

 ::haxe::ui::components::HorizontalScroll ScrollViewBuilder_obj::createHScroll(){
            	HX_GC_STACKFRAME(&_hx_pos_23283b2891872f10_1212_createHScroll)
HXLINE(1213)		if ((this->_component->get_isNativeScroller() == true)) {
HXLINE(1214)			return null();
            		}
HXLINE(1217)		 ::haxe::ui::geom::Size usableSize = this->_component->get_layout()->get_usableSize();
HXLINE(1218)		 ::haxe::ui::containers::Box horizontalConstraint = this->_contents;
HXLINE(1219)		 ::haxe::ui::components::HorizontalScroll hscroll = this->_component->findComponent(null(),::hx::ClassOf< ::haxe::ui::components::HorizontalScroll >(),false,null()).StaticCast<  ::haxe::ui::components::HorizontalScroll >();
HXLINE(1220)		Float vcw = horizontalConstraint->get_width();
HXDLIN(1220)		Float vcw1 = (vcw + this->horizontalConstraintModifier());
HXLINE(1222)		if ((usableSize->width <= 0)) {
HXLINE(1223)			return hscroll;
            		}
HXLINE(1226)		bool _hx_tmp;
HXDLIN(1226)		bool _hx_tmp1;
HXDLIN(1226)		if ((vcw1 > usableSize->width)) {
HXLINE(1226)			_hx_tmp1 = ::hx::IsNull( hscroll );
            		}
            		else {
HXLINE(1226)			_hx_tmp1 = false;
            		}
HXDLIN(1226)		if (!(_hx_tmp1)) {
HXLINE(1226)			_hx_tmp = (this->_scrollview->get_horizontalScrollPolicy() == HX_("always",cf,0e,d7,46));
            		}
            		else {
HXLINE(1226)			_hx_tmp = true;
            		}
HXDLIN(1226)		if (_hx_tmp) {
HXLINE(1227)			hscroll =  ::haxe::ui::components::HorizontalScroll_obj::__alloc( HX_CTX );
HXLINE(1228)			hscroll->set_scriptAccess(false);
HXLINE(1229)			hscroll->set_includeInLayout(!(this->_scrollview->get_autoHideScrolls()));
HXLINE(1230)			hscroll->set_hidden(this->_scrollview->get_autoHideScrolls());
HXLINE(1231)			hscroll->set_percentWidth(100);
HXLINE(1232)			hscroll->set_allowFocus(false);
HXLINE(1233)			hscroll->set_id(HX_("scrollview-hscroll",da,fc,19,11));
HXLINE(1234)			if (::hx::IsNotNull( this->_scrollview->get_hscrollThumbSize() )) {
HXLINE(1235)				hscroll->set_thumbSize(this->_scrollview->get_hscrollThumbSize());
            			}
HXLINE(1237)			this->_component->addComponent(hscroll);
HXLINE(1238)			this->_component->registerInternalEvents(null(),true);
            		}
HXLINE(1241)		if ((this->_scrollview->get_horizontalScrollPolicy() == HX_("never",8c,3e,30,99))) {
HXLINE(1242)			hscroll->set_includeInLayout(false);
HXLINE(1243)			hscroll->set_hidden(true);
            		}
            		else {
HXLINE(1244)			if ((this->_scrollview->get_horizontalScrollPolicy() == HX_("always",cf,0e,d7,46))) {
HXLINE(1245)				hscroll->set_includeInLayout(true);
HXLINE(1246)				hscroll->set_hidden(false);
            			}
            		}
HXLINE(1249)		return hscroll;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollViewBuilder_obj,createHScroll,return )

 ::haxe::ui::components::VerticalScroll ScrollViewBuilder_obj::createVScroll(){
            	HX_GC_STACKFRAME(&_hx_pos_23283b2891872f10_1253_createVScroll)
HXLINE(1254)		if ((this->_component->get_isNativeScroller() == true)) {
HXLINE(1255)			return null();
            		}
HXLINE(1258)		 ::haxe::ui::geom::Size usableSize = this->_component->get_layout()->get_usableSize();
HXLINE(1259)		 ::haxe::ui::containers::Box verticalConstraint = this->_contents;
HXLINE(1260)		 ::haxe::ui::components::VerticalScroll vscroll = this->_component->findComponent(null(),::hx::ClassOf< ::haxe::ui::components::VerticalScroll >(),false,null()).StaticCast<  ::haxe::ui::components::VerticalScroll >();
HXLINE(1261)		Float vch = verticalConstraint->get_height();
HXDLIN(1261)		Float vch1 = (vch + this->verticalConstraintModifier());
HXLINE(1263)		if ((usableSize->height <= 0)) {
HXLINE(1264)			return vscroll;
            		}
HXLINE(1267)		bool _hx_tmp;
HXDLIN(1267)		bool _hx_tmp1;
HXDLIN(1267)		if ((vch1 > usableSize->height)) {
HXLINE(1267)			_hx_tmp1 = ::hx::IsNull( vscroll );
            		}
            		else {
HXLINE(1267)			_hx_tmp1 = false;
            		}
HXDLIN(1267)		if (!(_hx_tmp1)) {
HXLINE(1267)			_hx_tmp = (this->_scrollview->get_verticalScrollPolicy() == HX_("always",cf,0e,d7,46));
            		}
            		else {
HXLINE(1267)			_hx_tmp = true;
            		}
HXDLIN(1267)		if (_hx_tmp) {
HXLINE(1268)			vscroll =  ::haxe::ui::components::VerticalScroll_obj::__alloc( HX_CTX );
HXLINE(1269)			vscroll->set_scriptAccess(false);
HXLINE(1270)			vscroll->set_includeInLayout(!(this->_scrollview->get_autoHideScrolls()));
HXLINE(1271)			vscroll->set_hidden(this->_scrollview->get_autoHideScrolls());
HXLINE(1272)			vscroll->set_percentHeight(100);
HXLINE(1273)			vscroll->set_allowFocus(false);
HXLINE(1274)			vscroll->set_id(HX_("scrollview-vscroll",68,7b,46,57));
HXLINE(1275)			if (::hx::IsNotNull( this->_scrollview->get_vscrollThumbSize() )) {
HXLINE(1276)				vscroll->set_thumbSize(this->_scrollview->get_vscrollThumbSize());
            			}
HXLINE(1278)			this->_component->addComponent(vscroll);
HXLINE(1279)			this->_component->registerInternalEvents(null(),true);
            		}
HXLINE(1282)		if ((this->_scrollview->get_verticalScrollPolicy() == HX_("never",8c,3e,30,99))) {
HXLINE(1283)			vscroll->set_includeInLayout(false);
HXLINE(1284)			vscroll->set_hidden(true);
            		}
            		else {
HXLINE(1285)			if ((this->_scrollview->get_verticalScrollPolicy() == HX_("always",cf,0e,d7,46))) {
HXLINE(1286)				vscroll->set_includeInLayout(true);
HXLINE(1287)				vscroll->set_hidden(false);
            			}
            		}
HXLINE(1290)		return vscroll;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollViewBuilder_obj,createVScroll,return )

void ScrollViewBuilder_obj::destroyHScroll(){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1294_destroyHScroll)
HXLINE(1295)		 ::haxe::ui::components::HorizontalScroll hscroll = this->_component->findComponent(null(),::hx::ClassOf< ::haxe::ui::components::HorizontalScroll >(),false,null()).StaticCast<  ::haxe::ui::components::HorizontalScroll >();
HXLINE(1296)		if (::hx::IsNotNull( hscroll )) {
HXLINE(1297)			this->_component->removeComponent(hscroll,null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollViewBuilder_obj,destroyHScroll,(void))

void ScrollViewBuilder_obj::destroyVScroll(){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1302_destroyVScroll)
HXLINE(1303)		 ::haxe::ui::components::VerticalScroll vscroll = this->_component->findComponent(null(),::hx::ClassOf< ::haxe::ui::components::VerticalScroll >(),false,null()).StaticCast<  ::haxe::ui::components::VerticalScroll >();
HXLINE(1304)		if (::hx::IsNotNull( vscroll )) {
HXLINE(1305)			this->_component->removeComponent(vscroll,null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollViewBuilder_obj,destroyVScroll,(void))

void ScrollViewBuilder_obj::updateScrollRect(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		bool _hx_run( ::haxe::ui::core::Component c){
            			HX_GC_STACKFRAME(&_hx_pos_23283b2891872f10_1348_updateScrollRect)
HXLINE(1353)			if (c->hasEvent(HX_("move",11,e3,60,48),null())) {
HXLINE(1354)				c->dispatch( ::haxe::ui::events::UIEvent_obj::__alloc( HX_CTX ,HX_("move",11,e3,60,48),null(),null()));
            			}
HXLINE(1356)			return true;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_23283b2891872f10_1309_updateScrollRect)
HXLINE(1310)		if (::hx::IsNull( this->_contents )) {
HXLINE(1311)			return;
            		}
HXLINE(1314)		 ::haxe::ui::geom::Size usableSize = this->_component->get_layout()->get_usableSize();
HXLINE(1316)		Float usableSize1 = usableSize->width;
HXDLIN(1316)		Float clipCX = (usableSize1 - this->horizontalConstraintModifier());
HXLINE(1317)		if ((clipCX > this->_contents->get_width())) {
HXLINE(1318)			Float clipCX1 = this->_contents->get_width();
HXDLIN(1318)			clipCX = (clipCX1 + this->horizontalConstraintModifier());
            		}
HXLINE(1320)		Float usableSize2 = usableSize->height;
HXDLIN(1320)		Float clipCY = (usableSize2 - this->verticalConstraintModifier());
HXLINE(1321)		if ((clipCY > this->_contents->get_height())) {
HXLINE(1322)			Float clipCY1 = this->_contents->get_height();
HXDLIN(1322)			clipCY = (clipCY1 + this->verticalConstraintModifier());
            		}
HXLINE(1325)		Float xpos = ( (Float)(0) );
HXLINE(1326)		Float ypos = ( (Float)(0) );
HXLINE(1328)		if ((this->get_virtualHorizontal() == false)) {
HXLINE(1329)			 ::haxe::ui::components::HorizontalScroll hscroll = this->_component->findComponent(null(),::hx::ClassOf< ::haxe::ui::components::HorizontalScroll >(),false,null()).StaticCast<  ::haxe::ui::components::HorizontalScroll >();
HXLINE(1330)			if (::hx::IsNotNull( hscroll )) {
HXLINE(1331)				xpos = hscroll->get_pos();
            			}
            		}
            		else {
HXLINE(1333)			if (::hx::IsNotNull( this->_contents->get_componentClipRect() )) {
HXLINE(1334)				clipCX = this->_contents->get_componentClipRect()->width;
            			}
            		}
HXLINE(1337)		if ((this->get_virtualVertical() == false)) {
HXLINE(1338)			 ::haxe::ui::components::VerticalScroll vscroll = this->_component->findComponent(null(),::hx::ClassOf< ::haxe::ui::components::VerticalScroll >(),false,null()).StaticCast<  ::haxe::ui::components::VerticalScroll >();
HXLINE(1339)			if (::hx::IsNotNull( vscroll )) {
HXLINE(1340)				ypos = vscroll->get_pos();
            			}
            		}
            		else {
HXLINE(1342)			if (::hx::IsNotNull( this->_contents->get_componentClipRect() )) {
HXLINE(1343)				clipCY = this->_contents->get_componentClipRect()->height;
            			}
            		}
HXLINE(1346)		 ::haxe::ui::geom::Rectangle newClipRect =  ::haxe::ui::geom::Rectangle_obj::__alloc( HX_CTX ,::Math_obj::fround(xpos),::Math_obj::fround(ypos),::Math_obj::fround(clipCX),::Math_obj::fround(clipCY));
HXLINE(1347)		this->_contents->set_componentClipRect(newClipRect);
HXLINE(1348)		this->_contents->walkComponents( ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollViewBuilder_obj,updateScrollRect,(void))

bool ScrollViewBuilder_obj::get_virtualHorizontal(){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1362_get_virtualHorizontal)
HXDLIN(1362)		return this->_scrollview->get_virtual();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollViewBuilder_obj,get_virtualHorizontal,return )

bool ScrollViewBuilder_obj::get_virtualVertical(){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1367_get_virtualVertical)
HXDLIN(1367)		return this->_scrollview->get_virtual();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollViewBuilder_obj,get_virtualVertical,return )

void ScrollViewBuilder_obj::onVirtualChanged(){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1370_onVirtualChanged)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ScrollViewBuilder_obj,onVirtualChanged,(void))

void ScrollViewBuilder_obj::applyStyle( ::haxe::ui::styles::Style style){
            	HX_STACKFRAME(&_hx_pos_23283b2891872f10_1374_applyStyle)
HXLINE(1375)		this->super::applyStyle(style);
HXLINE(1376)		if ((style->mode == HX_("mobile",62,ac,77,bf))) {
HXLINE(1377)			this->_scrollview->set_autoHideScrolls(true);
            		}
HXLINE(1380)		bool _hx_tmp;
HXDLIN(1380)		if (::hx::IsNotNull( style->contentWidth )) {
HXLINE(1380)			 ::Dynamic style1 = style->contentWidth;
HXDLIN(1380)			_hx_tmp = ::hx::IsNotEq( style1,this->_scrollview->get_contentWidth() );
            		}
            		else {
HXLINE(1380)			_hx_tmp = false;
            		}
HXDLIN(1380)		if (_hx_tmp) {
HXLINE(1381)			this->_scrollview->set_contentWidth(style->contentWidth);
            		}
            		else {
HXLINE(1382)			bool _hx_tmp1;
HXDLIN(1382)			if (::hx::IsNotNull( style->contentWidthPercent )) {
HXLINE(1382)				 ::Dynamic style2 = style->contentWidthPercent;
HXDLIN(1382)				_hx_tmp1 = ::hx::IsNotEq( style2,this->_scrollview->get_percentContentWidth() );
            			}
            			else {
HXLINE(1382)				_hx_tmp1 = false;
            			}
HXDLIN(1382)			if (_hx_tmp1) {
HXLINE(1383)				this->_scrollview->set_percentContentWidth(style->contentWidthPercent);
            			}
            		}
HXLINE(1386)		bool _hx_tmp2;
HXDLIN(1386)		if (::hx::IsNotNull( style->contentHeight )) {
HXLINE(1386)			 ::Dynamic style3 = style->contentHeight;
HXDLIN(1386)			_hx_tmp2 = ::hx::IsNotEq( style3,this->_scrollview->get_contentHeight() );
            		}
            		else {
HXLINE(1386)			_hx_tmp2 = false;
            		}
HXDLIN(1386)		if (_hx_tmp2) {
HXLINE(1387)			this->_scrollview->set_contentHeight(style->contentHeight);
            		}
            		else {
HXLINE(1388)			bool _hx_tmp3;
HXDLIN(1388)			if (::hx::IsNotNull( style->contentHeightPercent )) {
HXLINE(1388)				 ::Dynamic style4 = style->contentHeightPercent;
HXDLIN(1388)				_hx_tmp3 = ::hx::IsNotEq( style4,this->_scrollview->get_percentContentHeight() );
            			}
            			else {
HXLINE(1388)				_hx_tmp3 = false;
            			}
HXDLIN(1388)			if (_hx_tmp3) {
HXLINE(1389)				this->_scrollview->set_percentContentHeight(style->contentHeightPercent);
            			}
            		}
            	}



::hx::ObjectPtr< ScrollViewBuilder_obj > ScrollViewBuilder_obj::__new( ::haxe::ui::containers::ScrollView scrollview) {
	::hx::ObjectPtr< ScrollViewBuilder_obj > __this = new ScrollViewBuilder_obj();
	__this->__construct(scrollview);
	return __this;
}

::hx::ObjectPtr< ScrollViewBuilder_obj > ScrollViewBuilder_obj::__alloc(::hx::Ctx *_hx_ctx, ::haxe::ui::containers::ScrollView scrollview) {
	ScrollViewBuilder_obj *__this = (ScrollViewBuilder_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ScrollViewBuilder_obj), true, "haxe.ui.containers.ScrollViewBuilder"));
	*(void **)__this = ScrollViewBuilder_obj::_hx_vtable;
	__this->__construct(scrollview);
	return __this;
}

ScrollViewBuilder_obj::ScrollViewBuilder_obj()
{
}

void ScrollViewBuilder_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ScrollViewBuilder);
	HX_MARK_MEMBER_NAME(_scrollview,"_scrollview");
	HX_MARK_MEMBER_NAME(_contents,"_contents");
	HX_MARK_MEMBER_NAME(_contentsLayoutName,"_contentsLayoutName");
	HX_MARK_MEMBER_NAME(virtualHorizontal,"virtualHorizontal");
	HX_MARK_MEMBER_NAME(virtualVertical,"virtualVertical");
	 ::haxe::ui::core::CompositeBuilder_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ScrollViewBuilder_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_scrollview,"_scrollview");
	HX_VISIT_MEMBER_NAME(_contents,"_contents");
	HX_VISIT_MEMBER_NAME(_contentsLayoutName,"_contentsLayoutName");
	HX_VISIT_MEMBER_NAME(virtualHorizontal,"virtualHorizontal");
	HX_VISIT_MEMBER_NAME(virtualVertical,"virtualVertical");
	 ::haxe::ui::core::CompositeBuilder_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ScrollViewBuilder_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_contents") ) { return ::hx::Val( _contents ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"applyStyle") ) { return ::hx::Val( applyStyle_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_scrollview") ) { return ::hx::Val( _scrollview ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addComponent") ) { return ::hx::Val( addComponent_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkScrolls") ) { return ::hx::Val( checkScrolls_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createHScroll") ) { return ::hx::Val( createHScroll_dyn() ); }
		if (HX_FIELD_EQ(inName,"createVScroll") ) { return ::hx::Val( createVScroll_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"addComponentAt") ) { return ::hx::Val( addComponentAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getComponentAt") ) { return ::hx::Val( getComponentAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroyHScroll") ) { return ::hx::Val( destroyHScroll_dyn() ); }
		if (HX_FIELD_EQ(inName,"destroyVScroll") ) { return ::hx::Val( destroyVScroll_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"removeComponent") ) { return ::hx::Val( removeComponent_dyn() ); }
		if (HX_FIELD_EQ(inName,"virtualVertical") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_virtualVertical() : virtualVertical ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"updateScrollRect") ) { return ::hx::Val( updateScrollRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"onVirtualChanged") ) { return ::hx::Val( onVirtualChanged_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_numComponents") ) { return ::hx::Val( get_numComponents_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeComponentAt") ) { return ::hx::Val( removeComponentAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getComponentIndex") ) { return ::hx::Val( getComponentIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"setComponentIndex") ) { return ::hx::Val( setComponentIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"virtualHorizontal") ) { return ::hx::Val( inCallProp == ::hx::paccAlways ? get_virtualHorizontal() : virtualHorizontal ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_contentsLayoutName") ) { return ::hx::Val( _contentsLayoutName ); }
		if (HX_FIELD_EQ(inName,"removeAllComponents") ) { return ::hx::Val( removeAllComponents_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_virtualVertical") ) { return ::hx::Val( get_virtualVertical_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_virtualHorizontal") ) { return ::hx::Val( get_virtualHorizontal_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"createContentContainer") ) { return ::hx::Val( createContentContainer_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"verticalConstraintModifier") ) { return ::hx::Val( verticalConstraintModifier_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"horizontalConstraintModifier") ) { return ::hx::Val( horizontalConstraintModifier_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ScrollViewBuilder_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"_contents") ) { _contents=inValue.Cast<  ::haxe::ui::containers::Box >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_scrollview") ) { _scrollview=inValue.Cast<  ::haxe::ui::containers::ScrollView >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"virtualVertical") ) { virtualVertical=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"virtualHorizontal") ) { virtualHorizontal=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_contentsLayoutName") ) { _contentsLayoutName=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ScrollViewBuilder_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_scrollview",11,62,bf,f3));
	outFields->push(HX_("_contents",79,fc,b9,76));
	outFields->push(HX_("_contentsLayoutName",ee,9b,fd,2c));
	outFields->push(HX_("virtualHorizontal",cf,ba,86,d2));
	outFields->push(HX_("virtualVertical",a1,99,06,63));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ScrollViewBuilder_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ui::containers::ScrollView */ ,(int)offsetof(ScrollViewBuilder_obj,_scrollview),HX_("_scrollview",11,62,bf,f3)},
	{::hx::fsObject /*  ::haxe::ui::containers::Box */ ,(int)offsetof(ScrollViewBuilder_obj,_contents),HX_("_contents",79,fc,b9,76)},
	{::hx::fsString,(int)offsetof(ScrollViewBuilder_obj,_contentsLayoutName),HX_("_contentsLayoutName",ee,9b,fd,2c)},
	{::hx::fsBool,(int)offsetof(ScrollViewBuilder_obj,virtualHorizontal),HX_("virtualHorizontal",cf,ba,86,d2)},
	{::hx::fsBool,(int)offsetof(ScrollViewBuilder_obj,virtualVertical),HX_("virtualVertical",a1,99,06,63)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ScrollViewBuilder_obj_sStaticStorageInfo = 0;
#endif

static ::String ScrollViewBuilder_obj_sMemberFields[] = {
	HX_("_scrollview",11,62,bf,f3),
	HX_("_contents",79,fc,b9,76),
	HX_("_contentsLayoutName",ee,9b,fd,2c),
	HX_("create",fc,66,0f,7c),
	HX_("destroy",fa,2c,86,24),
	HX_("get_numComponents",53,76,26,3b),
	HX_("addComponent",5c,12,a8,0e),
	HX_("addComponentAt",6f,9a,96,16),
	HX_("removeComponent",d9,8b,72,50),
	HX_("removeAllComponents",b3,1e,97,3c),
	HX_("removeComponentAt",2c,2d,10,3b),
	HX_("getComponentIndex",4b,fc,8e,7f),
	HX_("setComponentIndex",57,d4,fc,a2),
	HX_("getComponentAt",1a,e6,5d,08),
	HX_("createContentContainer",e4,d3,42,a7),
	HX_("horizontalConstraintModifier",d8,e6,93,6e),
	HX_("verticalConstraintModifier",ea,f2,b6,ce),
	HX_("checkScrolls",de,eb,5e,1e),
	HX_("createHScroll",f9,62,f4,48),
	HX_("createVScroll",87,e1,20,8f),
	HX_("destroyHScroll",bb,78,1d,cd),
	HX_("destroyVScroll",49,f7,49,13),
	HX_("updateScrollRect",3a,ab,52,53),
	HX_("virtualHorizontal",cf,ba,86,d2),
	HX_("get_virtualHorizontal",a6,bd,34,51),
	HX_("virtualVertical",a1,99,06,63),
	HX_("get_virtualVertical",b8,68,11,ee),
	HX_("onVirtualChanged",a8,ef,1c,9b),
	HX_("applyStyle",e3,20,6f,2f),
	::String(null()) };

::hx::Class ScrollViewBuilder_obj::__mClass;

void ScrollViewBuilder_obj::__register()
{
	ScrollViewBuilder_obj _hx_dummy;
	ScrollViewBuilder_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ui.containers.ScrollViewBuilder",bf,ee,2c,f4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ScrollViewBuilder_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ScrollViewBuilder_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ScrollViewBuilder_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ScrollViewBuilder_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ui
} // end namespace containers
